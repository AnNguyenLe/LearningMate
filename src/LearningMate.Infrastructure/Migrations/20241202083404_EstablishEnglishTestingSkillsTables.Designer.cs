// <auto-generated />
using System;
using LearningMate.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LearningMate.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241202083404_EstablishEnglishTestingSkillsTables")]
    partial class EstablishEnglishTestingSkillsTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LearningMate.Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("SubmissionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_time");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_exams");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.ExamineeExamRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<Guid?>("ExamineeId")
                        .HasColumnType("uuid")
                        .HasColumnName("examinee_id");

                    b.Property<double?>("OverallScore")
                        .HasColumnType("double precision")
                        .HasColumnName("overall_score");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_examinee_exam_relationships");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_examinee_exam_relationships_exam_id");

                    b.HasIndex("ExamineeId")
                        .HasDatabaseName("ix_examinee_exam_relationships_examinee_id");

                    b.ToTable("examinee_exam_relationships", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Listening.ListeningTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<double?>("ScoreBand")
                        .HasColumnType("double precision")
                        .HasColumnName("score_band");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_listening_topics");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_listening_topics_exam_id");

                    b.ToTable("listening_topics", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Listening.ListeningTopicQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("SerializedAnswerOptions")
                        .HasColumnType("text")
                        .HasColumnName("serialized_answer_options");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_listening_topic_questions");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_listening_topic_questions_topic_id");

                    b.ToTable("listening_topic_questions", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Reading.ReadingTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<double?>("ScoreBand")
                        .HasColumnType("double precision")
                        .HasColumnName("score_band");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_reading_topics");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_reading_topics_exam_id");

                    b.ToTable("reading_topics", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Reading.ReadingTopicQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("SerializedAnswerOptions")
                        .HasColumnType("text")
                        .HasColumnName("serialized_answer_options");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_reading_topic_questions");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_reading_topic_questions_topic_id");

                    b.ToTable("reading_topic_questions", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Speaking.SpeakingTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<double?>("ScoreBand")
                        .HasColumnType("double precision")
                        .HasColumnName("score_band");

                    b.Property<string>("SerializedResourcesUrl")
                        .HasColumnType("text")
                        .HasColumnName("serialized_resources_url");

                    b.HasKey("Id")
                        .HasName("pk_speaking_topics");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_speaking_topics_exam_id");

                    b.ToTable("speaking_topics", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Speaking.SpeakingTopicAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_speaking_topic_answers");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_speaking_topic_answers_topic_id");

                    b.ToTable("speaking_topic_answers", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Writing.WritingTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_id");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<double?>("ScoreBand")
                        .HasColumnType("double precision")
                        .HasColumnName("score_band");

                    b.Property<string>("SerializedResourcesUrl")
                        .HasColumnType("text")
                        .HasColumnName("serialized_resources_url");

                    b.HasKey("Id")
                        .HasName("pk_writing_topics");

                    b.HasIndex("ExamId")
                        .HasDatabaseName("ix_writing_topics_exam_id");

                    b.ToTable("writing_topics", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Writing.WritingTopicAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_writing_topic_answers");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_writing_topic_answers_topic_id");

                    b.ToTable("writing_topic_answers", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_app_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("app_roles", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime>("RefreshTokenExpiryDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_date_time");

                    b.Property<string>("RefreshTokenHash")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token_hash");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_app_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("app_users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_app_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_app_role_claims_role_id");

                    b.ToTable("app_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_app_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_app_user_claims_user_id");

                    b.ToTable("app_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_app_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_app_user_logins_user_id");

                    b.ToTable("app_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_app_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_app_user_roles_role_id");

                    b.ToTable("app_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_app_user_tokens");

                    b.ToTable("app_user_tokens", (string)null);
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.ExamineeExamRelationship", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Exam", "Exam")
                        .WithMany("ExamineeExamRelationships")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_examinee_exam_relationships_exams_exam_id");

                    b.HasOne("LearningMate.Domain.IdentityEntities.AppUser", "Examinee")
                        .WithMany("ExamineeExamRelationships")
                        .HasForeignKey("ExamineeId")
                        .HasConstraintName("fk_examinee_exam_relationships_app_users_examinee_id");

                    b.Navigation("Exam");

                    b.Navigation("Examinee");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Listening.ListeningTopic", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Exam", "Exam")
                        .WithMany("ListeningTopics")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_listening_topics_exams_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Listening.ListeningTopicQuestion", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Listening.ListeningTopic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_listening_topic_questions_listening_topics_topic_id");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Reading.ReadingTopic", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Exam", "Exam")
                        .WithMany("ReadingTopics")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_reading_topics_exams_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Reading.ReadingTopicQuestion", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Reading.ReadingTopic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_reading_topic_questions_reading_topics_topic_id");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Speaking.SpeakingTopic", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Exam", "Exam")
                        .WithMany("SpeakingTopics")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_speaking_topics_exams_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Speaking.SpeakingTopicAnswer", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Speaking.SpeakingTopic", "Topic")
                        .WithMany("Answers")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_speaking_topic_answers_speaking_topics_topic_id");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Writing.WritingTopic", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Exam", "Exam")
                        .WithMany("WritingTopics")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("fk_writing_topics_exams_exam_id");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Writing.WritingTopicAnswer", b =>
                {
                    b.HasOne("LearningMate.Domain.Entities.Writing.WritingTopic", "Topic")
                        .WithMany("Answers")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_writing_topic_answers_writing_topics_topic_id");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LearningMate.Domain.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_role_claims_app_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LearningMate.Domain.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_user_claims_app_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LearningMate.Domain.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_user_logins_app_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LearningMate.Domain.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_user_roles_app_roles_role_id");

                    b.HasOne("LearningMate.Domain.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_user_roles_app_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LearningMate.Domain.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_user_tokens_app_users_user_id");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Exam", b =>
                {
                    b.Navigation("ExamineeExamRelationships");

                    b.Navigation("ListeningTopics");

                    b.Navigation("ReadingTopics");

                    b.Navigation("SpeakingTopics");

                    b.Navigation("WritingTopics");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Listening.ListeningTopic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Reading.ReadingTopic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Speaking.SpeakingTopic", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LearningMate.Domain.Entities.Writing.WritingTopic", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LearningMate.Domain.IdentityEntities.AppUser", b =>
                {
                    b.Navigation("ExamineeExamRelationships");
                });
#pragma warning restore 612, 618
        }
    }
}
